/// <reference types="node" />
import type { OAuth2Namespace } from "@fastify/oauth2";
import type { AnyClient } from "@gadgetinc/api-client-core";
import type { FastifyInstance, FastifyReply, FastifyRequest } from "fastify";
declare const googleSignupTrigger = "gadget/trigger/google_oauth/signup";
declare const googleSigninTrigger = "gadget/trigger/google_oauth/signin";
declare module "fastify" {
    interface FastifyInstance {
        googleOAuth2: OAuth2Namespace;
        currentAppBridge: {
            areaConfig: AppConfig;
        };
    }
    interface FastifyReply {
        view: (page: string, data?: object) => Promise<string>;
    }
    interface FastifyRequest {
        gadgetAuth?: Partial<GadgetAuthOptions<any>>;
    }
}
export type Providers<UserInput> = {
    type: "google";
    /**
     * Your Google OAuth client id. This must be set when using `gadgetManagedCredentials: false`
     */
    clientId: string;
    /**
     * Your Google OAuth client secret. This must be set when using `gadgetManagedCredentials: false`
     */
    clientSecret: string;
    /**
     * An optional set of scopes to use in the OAuth request to google. If none are specified, will default to `["email", "profile"]`
     */
    scopes?: string[];
    /**
     * Configures the path to which the user is redirected after a successful Google OAuth sign in. Defaults to `/`.
     */
    redirectTo?: string;
    /**
     * If `true`, your plugins will use Gadget-managed credentials to avoid having to set up a OAuth client credentials in Google. This should
     * not be used in `production`.
     */
    gadgetManagedCredentials?: boolean;
    /**
     * Configure the relative path, which will be used in the `redirectURI` that is sent to Google. It will be relative to your environment's domain. This value is explicitly set in order to teach you about your internal auth paths, but should not be changed. Defaults to `/auth/google/callback` in your app's code.
     */
    callbackPath: string;
};
/**
 * Options for the Gadget auth plugin
 * @property {Providers} providers The providers to use for authentication
 * @property {AnyClient} api The Gadget API client to use for creating and updating users and sessions
 * @property {string} loginPath The path to redirect to when a route is protected and the user is not signed in. Defaults to `/login`.
 * @property {boolean} redirectToLogin Whether to redirect to the login path when a route is protected and the user is not signed in. Defaults to `false`.
 */
export type GadgetAuthOptions<UserInput> = {
    /**
     * If `true`, your plugins will use Gadget-managed credentials to avoid having to set up a OAuth clients on supported OAuth providers to start. This should
     * not be used in `production`. Can be overriden on a per-provider basis.
     */
    gadgetManagedCredentials?: boolean;
    /**
     * The oauth2 providers to use for authentication. Supported providers: `google`
     */
    providers: Providers<UserInput>[];
    /**
     * Your Gadget API client to use for creating and updating `User` and `Session` records. This should be the exported `api` client from the `gadget-server` package.
     */
    api: AnyClient;
    /**
     * The `signInPath` used when `redirectToSignIn` is set to `true`. Defaults to `/`.
     */
    signInPath?: string;
    /**
     * Configures whether to redirect to the `signInPath` when a route is protected and the `User` is not signed in, or simply to reply with a `403`. Defaults to `false`.
     */
    redirectToSignIn?: boolean;
    /**
     * Configures the path to which the user is redirected after a successful sign in on the oauth2 provider. Defaults to `/`.
     */
    redirectTo?: string;
};
type GoogleOAuthResult = {
    sub: string;
    name: string;
    given_name: string;
    family_name: string;
    picture: string;
    email: string;
    email_verified: string;
    locale: string;
    hd: string;
};
type AppConfig = {
    sessionModel?: {
        apiIdentifier: string;
        key: string;
    };
    userModel?: {
        apiIdentifier: string;
        key: string;
        [googleSigninTrigger]: {
            triggerAction: string;
            inputType: string;
        };
        [googleSignupTrigger]: {
            triggerAction: string;
            inputType: string;
        };
        updateAction: {
            apiIdentifier: string;
            triggerAction: string;
            inputType: string;
        };
    };
};
/**
 * Default mapping of Google OAuth result to user input
 * @param result Claims from Google OAuth result
 * @returns User input for creating/updating a user with the default User model
 */
export declare const googleResultToUser: (result: GoogleOAuthResult) => {
    email: string;
    firstName: string;
    lastName: string;
    googleImageUrl: string;
};
/**
 * Utility function to wrap route handlers with protection from unauthenticated requests.
 *
 * @param handler The route handler to protect
 * @param {ProtectedRouteOptions} options Options for the protected route
 * @returns handler function that is wrapped with route protection
 *
 * @example
 * ```ts
 * // routes/GET-protected-route.js
 * const { preValidation } = require("@gadgetinc/auth");
 *
 * module.exports = async ({ request, reply }) => {
 *  await reply.send("this is a protected route");
 * }
 *
 * module.options = {
 *  preValidation,
 * }
 * ```
 */
export declare const preValidation: <RouteContext extends FastifyRequest<import("fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown, import("fastify").FastifyLoggerInstance>>(request: RouteContext, reply: FastifyReply) => Promise<void>;
interface BaseUserInput {
    email: string;
    firstName: string;
    lastName: string;
    googleImageUrl: string;
}
/**
 * Fastify auth plugin for Gadget apps. This plugin will register route handlers for the specified providers and handle creating/updating users and sessions.
 * @param {FastifyInstance} fastify instance of fastify server
 * @param {GadgetAuthOptions} options options for the auth plugin
 * @param {HookHandlerDoneFunction} done hook handler done function when plugin is registered
 *
 * @example
 * ```ts
 * import { Auth } from "@gadgetinc/auth";
 * import { Client } from "@gadget-client/my-app";
 *
 * const api = new Client({
 *  authenticationMode: {
 *   apiKey: "my-api-key",
 *  }
 * });
 *
 * export default function(server) {
 *  server.register(Auth, {
 *   gadgetManagedCredentials: false,
 *   api,
 *   providers: [
 *    {
 *      type: "google",
 *      clientId: process.env.GOOGLE_CLIENT_ID,
 *      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
 *    }
 *   ],
 *  });
 * }
 * ```
 */
export declare const Auth: <UserInput extends BaseUserInput>(instance: FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>, opts: GadgetAuthOptions<UserInput>, done: (err?: Error) => void) => void;
export {};
