{
  "version": 3,
  "sources": ["../../src/bigcommerce/effects.ts"],
  "sourcesContent": ["import type { GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport { FieldType, getActionContextFromLocalStorage, LINK_PARAM } from \"../effects\";\nimport { MisconfiguredActionError, PermissionDeniedError } from \"../errors\";\nimport { Globals } from \"../globals\";\nimport type { BigCommerceTenancy } from \"../tenancy\";\nimport { AppTenancyKey } from \"../tenancy\";\nimport type { AnyParams, FieldMetadata, ModelDescriptor } from \"../types\";\n\n/**\n * Applicable for multi-tenant Store apps(public apps)\n * Enforces that the given record is only accessible by the current store or customer\n * *\n * @param params - incoming data validated against the current `storeHash`\n * @param record - record used to validate or set the `storeHash` on\n */\nexport async function preventCrossStoreDataAccess(\n  params: AnyParams,\n  record: GadgetRecord<any>,\n  options?: { storeBelongsToField?: string }\n): Promise<void> {\n  const context = getActionContextFromLocalStorage();\n\n  if (context.type != \"effect\") {\n    throw new Error(\"Can't prevent cross store data access outside of an action effect\");\n  }\n  if (!params) {\n    throw new Error(\"The `params` parameter is required in preventCrossStoreDataAccess(params, record)\");\n  }\n  if (!record) {\n    throw new Error(\"The `record` parameter is required in preventCrossStoreDataAccess(params, record)\");\n  }\n\n  const model = context.model;\n  const appTenancy = context[AppTenancyKey];\n\n  // if there's no tenancy let's continue\n  if (appTenancy?.bigcommerce?.storeId === undefined) {\n    return;\n  }\n\n  // if this effect is not run in the context of a model then it does not apply\n  if (!model) {\n    return;\n  }\n\n  const input = params[model.apiIdentifier];\n  const storeBelongsToField = options?.storeBelongsToField;\n  validateBelongsToLink({\n    input,\n    record,\n    params,\n    model,\n    tenancy: appTenancy.bigcommerce,\n    relatedModelKey: bigcommerceStoreKey,\n    tenantBelongsToField: storeBelongsToField,\n    tenantType: TenantType.Store,\n  });\n}\n\nconst bigcommerceModelKey = (modelName: string): string => {\n  const modelKey = modelName.replaceAll(\" \", \"\");\n  return `DataModel-BigCommerce-${modelKey}`;\n};\n\nconst bigcommerceStoreKey: string = bigcommerceModelKey(\"Store\");\n\nconst validateBelongsToLink = (options: {\n  input: any;\n  record: any;\n  params: AnyParams;\n  tenancy: BigCommerceTenancy;\n  model: ModelDescriptor;\n  relatedModelKey: string;\n  tenantBelongsToField?: string | undefined;\n  tenantType: TenantType;\n}) => {\n  const { input, record, params, tenancy, model, relatedModelKey, tenantType, tenantBelongsToField } = options;\n  if (relatedModelKey != bigcommerceStoreKey) {\n    throw new Error(\"Validation for tenancy can only be Big Commerce Store\");\n  }\n\n  // If this effect is being added to the related tenant model (BigCommerce Store), simply compare the record's ID\n  if (model.key == relatedModelKey) {\n    if (record && String(record.id) !== tenancy.storeId) {\n      throw new PermissionDeniedError();\n    }\n    return;\n  }\n\n  const fieldsIsBelongsToRelatedModel = Object.values(model.fields).filter(\n    (f) => f.fieldType === (FieldType.BelongsTo as string) && f.configuration.relatedModelKey === relatedModelKey\n  );\n\n  if (fieldsIsBelongsToRelatedModel.length === 0) {\n    throw new MisconfiguredActionError(`This model is missing a related ${tenantType} field.`);\n  }\n\n  if (fieldsIsBelongsToRelatedModel.length > 1 && !tenantBelongsToField) {\n    throw new MisconfiguredActionError(\n      `This function is missing a related ${tenantType} field option. \\`${tenantType}BelongsToField\\` is a required option parameter if the model has more than one related ${tenantType} field.`\n    );\n  }\n  let relatedTenantField = fieldsIsBelongsToRelatedModel[0];\n\n  if (tenantBelongsToField) {\n    const selectedField = Object.values(model.fields).find((f) => f.apiIdentifier === tenantBelongsToField);\n    if (!selectedField) {\n      throw new MisconfiguredActionError(`The selected ${tenantType} relation field does not exist.`);\n    }\n\n    if (selectedField.fieldType !== (FieldType.BelongsTo as string) || selectedField.configuration.relatedModelKey !== relatedModelKey) {\n      throw new MisconfiguredActionError(\n        `The selected ${tenantType} relation field should be a \\`Belongs To\\` relationship to the \\`BigCommerce ${Globals.platformModules\n          .lodash()\n          .capitalize(tenantType)}\\` model.`\n      );\n    } else {\n      relatedTenantField = selectedField;\n    }\n  }\n\n  setBelongsToLink(input, record, params, model, relatedTenantField, tenancy.storeId);\n};\n\nconst setBelongsToLink = (\n  input: any,\n  record: any,\n  params: AnyParams,\n  model: ModelDescriptor,\n  relatedField: FieldMetadata,\n  tenantId: string\n) => {\n  // if we're trying to set the params to a store other than the tenant we should reject\n  if (Globals.platformModules.lodash().isObjectLike(input)) {\n    const objectInput = input as Record<string, any>;\n    if (objectInput[relatedField.apiIdentifier]) {\n      if (String(objectInput[relatedField.apiIdentifier][LINK_PARAM]) !== tenantId) {\n        throw new PermissionDeniedError();\n      }\n    } else {\n      objectInput[relatedField.apiIdentifier] = {\n        [LINK_PARAM]: tenantId,\n      };\n    }\n  } else {\n    params[model.apiIdentifier] = {\n      [relatedField.apiIdentifier]: {\n        [LINK_PARAM]: tenantId,\n      },\n    };\n  }\n\n  if (record) {\n    const value = record.getField(relatedField.apiIdentifier);\n    // if the record doesn't have a shop set then anyone can update it\n    if (value) {\n      const recordShopId = typeof value === \"object\" ? value[LINK_PARAM] : value;\n      if (String(recordShopId) !== tenantId) {\n        throw new PermissionDeniedError();\n      }\n    } else {\n      // we have to re-apply the params to the record to ensure that this still works correctly if it occurs after \"applyParams\"\n      record.setField(relatedField.apiIdentifier, {\n        [LINK_PARAM]: tenantId,\n      });\n    }\n  }\n};\n\nconst enum TenantType {\n  Store = \"store\",\n}\n"],
  "mappings": "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",
  "names": ["TenantType"]
}
