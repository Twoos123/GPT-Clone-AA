{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/**\n* This is the Gadget server side types library for:\n*\n*                                 _             _                  \n*    __ _  __ _        __ _ _ __ | |_       ___| | ___  _ __   ___ \n*   / _` |/ _` |_____ / _` | '_ \\| __|____ / __| |/ _ \\| '_ \\ / _ \\\n*  | (_| | (_| |_____| (_| | |_) | ||_____| (__| | (_) | | | |  __/\n*   \\__,_|\\__,_|      \\__, | .__/ \\__|     \\___|_|\\___/|_| |_|\\___|\n*                     |___/|_|                                     \n*\n* Built for environment `Development` at version 49\n* Framework version: ^0.2.0\n* Edit this app here: https://aa-gpt-clone.gadget.dev/edit\n*/\nimport type { Client } from \"@gadget-client/aa-gpt-clone\";\nimport { Logger } from \"./AmbientContext\";\nexport { InvalidRecordError } from '@gadgetinc/api-client-core'\n\nexport * from \"./metadataFileTypes\";\nexport * from \"./AmbientContext\";\nexport * from \"./AppConfigs\";\nexport * from \"./AppConfiguration\";\nexport * from \"./AppConnections\";\nimport { AppConnections } from \"./AppConnections\";\nexport * from \"./auth\";\nexport * as DefaultEmailTemplates from \"./email-templates\";\nexport * from \"./emails\";\nexport { InvalidStateTransitionError } from \"./errors\";\nexport * from \"./global-actions\";\nexport * from \"./routes\";\nexport * from \"./state-chart\";\nexport * from \"./types\";\nexport * from \"./ActionOptions\";\nexport * from \"./effects\";\nexport * from \"./utils\";\nimport type { RouteContext } from \"./routes\";\n\nexport {\n  preventCrossShopDataAccess,\n  ShopifyBulkOperationState,\n  ShopifySellingPlanGroupProductState,\n  ShopifySellingPlanGroupProductVariantState,\n  ShopifyShopState,\n  ShopifySyncState,\n  abortSync,\n  finishBulkOperation,\n  globalShopifySync,\n  shopifySync,\n} from \"./shopify\";\n\n/**\n * @internal\n */\nimport { Globals, actionContextLocalStorage } from \"./globals\";\nexport * from \"./models/User\";\nexport * from \"./models/Session\";\nexport * from \"./models/Message\";\nexport * from \"./models/Chat\";\n\n/**\n* A map of connection name to instantiated connection objects for the app.\n*/\nlet connections: AppConnections;\n\n/**\n * An instance of the Gadget logger\n */\nlet logger: Logger;\n/**\n * An instance of the Gadget API client that has admin permissions\n */\nlet api: Client;\n\n/**\n* This is used internally to set the connections.\n* @internal\n*/\nexport const setConnections = (appConnections: AppConnections) => {\n  connections = new Proxy(appConnections, {\n    get: (target: any, prop: string) => {\n      const actionContext = actionContextLocalStorage.getStore();\n      if(actionContext && actionContext.connections) {\n        return actionContext.connections[prop];\n      }\n\n      const routeContext = Globals.requestContext.get(\"requestContext\");\n      if(routeContext && routeContext.connections) {\n        return routeContext.connections[prop];\n      }\n\n      return target[prop];\n    }\n  })\n}\n\n/**\n * This is used internally to set the rootLogger.\n * @internal\n */\nexport const setLogger = (rootLogger: Logger) => {\n  Globals.logger = rootLogger;\n  logger = rootLogger;\n};\n\n/**\n * This is used internally to set the client Instance\n * @internal\n */\nexport const setApiClient = (client: Client) => {\n  api = client;\n}\n\nexport {\n  api, logger, connections\n};\n\n/**\n * @internal\n */\nexport {\n  Globals,\n  actionContextLocalStorage\n};\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,6BAAmC;AAEnC,wBAAc,gCAlBd;AAmBA,wBAAc,6BAnBd;AAoBA,wBAAc,yBApBd;AAqBA,wBAAc,+BArBd;AAsBA,wBAAc,6BAtBd;AAwBA,wBAAc,mBAxBd;AAyBA,4BAAuC;AACvC,wBAAc,qBA1Bd;AA2BA,oBAA4C;AAC5C,wBAAc,6BA5Bd;AA6BA,wBAAc,qBA7Bd;AA8BA,wBAAc,0BA9Bd;AA+BA,wBAAc,oBA/Bd;AAgCA,wBAAc,4BAhCd;AAiCA,wBAAc,sBAjCd;AAkCA,wBAAc,oBAlCd;AAqCA,qBAWO;AAKP,qBAAmD;AACnD,wBAAc,0BAtDd;AAuDA,wBAAc,6BAvDd;AAwDA,wBAAc,6BAxDd;AAyDA,wBAAc,0BAzDd;AA8DA,IAAI;AAKJ,IAAI;AAIJ,IAAI;AAMG,MAAM,iBAAiB,CAAC,mBAAmC;AAChE,gBAAc,IAAI,MAAM,gBAAgB;AAAA,IACtC,KAAK,CAAC,QAAa,SAAiB;AAClC,YAAM,gBAAgB,yCAA0B,SAAS;AACzD,UAAG,iBAAiB,cAAc,aAAa;AAC7C,eAAO,cAAc,YAAY,IAAI;AAAA,MACvC;AAEA,YAAM,eAAe,uBAAQ,eAAe,IAAI,gBAAgB;AAChE,UAAG,gBAAgB,aAAa,aAAa;AAC3C,eAAO,aAAa,YAAY,IAAI;AAAA,MACtC;AAEA,aAAO,OAAO,IAAI;AAAA,IACpB;AAAA,EACF,CAAC;AACH;AAMO,MAAM,YAAY,CAAC,eAAuB;AAC/C,yBAAQ,SAAS;AACjB,WAAS;AACX;AAMO,MAAM,eAAe,CAAC,WAAmB;AAC9C,QAAM;AACR;",
  "names": []
}
