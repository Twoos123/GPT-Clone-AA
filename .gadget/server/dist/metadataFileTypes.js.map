{
  "version": 3,
  "sources": ["../src/metadataFileTypes.ts"],
  "sourcesContent": ["/**\nA map of roles with the role key as the map key.\n\nExample:\n```\n{\n  \"signed-in\": {\n    name: \"signed-in\",\n    default: {\n      read: true,\n      action: true,\n    },\n    models: {\n      user: {\n        read: {\n          filter: \"user/filters/tenant.gelly\",\n        },\n        actions: {\n          changePassword: {\n            filter: \"user/filters/tenant.gelly\",\n          },\n          signOut: {\n            filter: \"user/filters/tenant.gelly\",\n          },\n        },\n      },\n    },\n  }\n}\n```\n */\ntype GadgetPermissions = {\n  type: \"gadget/permissions/v1\";\n  roles: {\n    [x: string]: {\n      storageKey: string;\n      default?:\n        | {\n            read?: boolean | undefined;\n            action?: boolean | undefined;\n          }\n        | undefined;\n      models?:\n        | {\n            [x: string]: {\n              read?:\n                | (\n                    | boolean\n                    | {\n                        filter: string | null;\n                      }\n                  )\n                | undefined;\n              actions?:\n                | {\n                    [x: string]:\n                      | boolean\n                      | {\n                          filter: string | null;\n                        };\n                  }\n                | undefined;\n            };\n          }\n        | undefined;\n      actions?:\n        | {\n            [x: string]: boolean;\n          }\n        | undefined;\n    };\n  };\n};\n\ntype GadgetSettings = {\n  type: \"gadget/settings/v1\";\n  frameworkVersion: \"v0.1\" | \"v0.2\" | \"v0.3\" | \"v0.3.1\" | \"v1.0.0\" | \"v1.1.0\" | \"v1.2.0\" | \"v1.3.0\";\n  plugins: {\n    connections?:\n      | {\n          shopify?:\n            | (\n                | {\n                    apiVersion: \"2022-01\" | \"2022-04\" | \"2022-07\" | \"2022-10\" | \"2023-01\" | \"2023-04\" | \"2023-07\" | \"2023-10\" | \"2024-01\" | \"2024-04\" | \"2024-07\";\n                    enabledModels: string[];\n                    type: \"partner\";\n                    scopes: string[];\n                    customerAuthenticationEnabled?: boolean | undefined;\n                  }\n                | {\n                    apiVersion: \"2022-01\" | \"2022-04\" | \"2022-07\" | \"2022-10\" | \"2023-01\" | \"2023-04\" | \"2023-07\" | \"2023-10\" | \"2024-01\" | \"2024-04\" | \"2024-07\";\n                    enabledModels: string[];\n                    type: \"admin\";\n                  }\n              )\n            | undefined;\n          openai?: boolean | undefined;\n          sentry?: boolean | undefined;\n          bigcommerce?:\n            | {\n                type: \"singleClick\";\n              }\n            | undefined;\n        }\n      | undefined;\n    authentications?:\n      | {\n          settings: {\n            redirectOnSignIn: string;\n            signInPath: string;\n            unauthorizedUserRedirect: \"redirect\" | \"signInPath\" | \"show-403-error\" | \"403Error\";\n            accessControlForSignedInUsers?: string[] | undefined;\n            defaultSignedInRoles?: string[] | undefined;\n          };\n          methods: {\n            googleOAuth?:\n              | {\n                  offlineAccess: boolean;\n                  scopes: string[];\n                }\n              | undefined;\n            emailPassword?: boolean | undefined;\n          };\n        }\n      | undefined;\n  };\n};\n\ntype GadgetModel = {\n  type: \"gadget/model-schema/v1\";\n  /** The storage key addressing this model's data in the database */\n  storageKey: string;\n  /** A list of fields of the model */\n  fields: {\n    [x: string]:\n      | {\n          /** The stored datatype of the field. number fields store numeric values. */\n          type: \"number\";\n          /** Optionally connect this field to a metafield within Shopify */\n          shopifyMetafield?:\n            | {\n                /** Whether this metafield is private */\n                privateMetafield?: boolean | undefined;\n                /** The namespace of the metafield */\n                namespace?: string | undefined;\n                /** The key of the metafield */\n                key?: string | undefined;\n                /** The type of the metafield */\n                metafieldType?: string | undefined;\n                /** Whether this metafield allows multiple entries */\n                allowMultipleEntries?: boolean | undefined;\n              }\n            | undefined;\n          /** The default value of the field for newly created records */\n          default?: number | undefined;\n          /** The number of decimal places of the field */\n          decimals?: number | undefined;\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                /** Validate this field's length is within a given range */\n                numberRange?:\n                  | {\n                      /** The minimum length of the field */\n                      min: number | null;\n                      /** The maximum length of the field */\n                      max: number | null;\n                    }\n                  | undefined;\n                unique?:\n                  | (\n                      | {\n                          /** The field to scope the uniqueness validation by */\n                          scopeByField?: string | undefined;\n                        }\n                      | boolean\n                    )\n                  | undefined;\n                /** Validate values for this field with a JavaScript function from a file */\n                run?: (string | null)[] | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. string fields store strings of UTF-8 characters. */\n          type: \"string\";\n          /** Optionally connect this field to a metafield within Shopify */\n          shopifyMetafield?:\n            | {\n                /** Whether this metafield is private */\n                privateMetafield?: boolean | undefined;\n                /** The namespace of the metafield */\n                namespace?: string | undefined;\n                /** The key of the metafield */\n                key?: string | undefined;\n                /** The type of the metafield */\n                metafieldType?: string | undefined;\n                /** Whether this metafield allows multiple entries */\n                allowMultipleEntries?: boolean | undefined;\n              }\n            | undefined;\n          /** The default value of the field for newly created records */\n          default?: string | undefined;\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                /** Validate this field's length is within a given range */\n                stringLength?:\n                  | {\n                      /** The minimum length of the field */\n                      min: number | null;\n                      /** The maximum length of the field */\n                      max: number | null;\n                    }\n                  | undefined;\n                /** Ensure values for this field match a regular expression */\n                regex?: (string | null)[] | undefined;\n                unique?:\n                  | (\n                      | {\n                          /** The field to scope the uniqueness validation by */\n                          scopeByField?: string | undefined;\n                          caseSensitive?: boolean | undefined;\n                        }\n                      | boolean\n                    )\n                  | undefined;\n                /** Validate values for this field with a JavaScript function from a file */\n                run?: (string | null)[] | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. richText fields store markdown content for human consumption. */\n          type: \"richText\";\n          /** Optionally connect this field to a metafield within Shopify */\n          shopifyMetafield?:\n            | {\n                /** Whether this metafield is private */\n                privateMetafield?: boolean | undefined;\n                /** The namespace of the metafield */\n                namespace?: string | undefined;\n                /** The key of the metafield */\n                key?: string | undefined;\n                /** The type of the metafield */\n                metafieldType?: string | undefined;\n                /** Whether this metafield allows multiple entries */\n                allowMultipleEntries?: boolean | undefined;\n              }\n            | undefined;\n          /** The default value of the field for newly created records */\n          default?:\n            | {\n                markdown: string;\n              }\n            | undefined;\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                /** Validate this field's length is within a given range */\n                stringLength?:\n                  | {\n                      /** The minimum length of the field */\n                      min: number | null;\n                      /** The maximum length of the field */\n                      max: number | null;\n                    }\n                  | undefined;\n                /** Ensure values for this field match a regular expression */\n                regex?: (string | null)[] | undefined;\n                unique?:\n                  | (\n                      | {\n                          /** The field to scope the uniqueness validation by */\n                          scopeByField?: string | undefined;\n                          caseSensitive?: boolean | undefined;\n                        }\n                      | boolean\n                    )\n                  | undefined;\n                /** Validate values for this field with a JavaScript function from a file */\n                run?: (string | null)[] | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. email fields store one well-formatted email address as a string. */\n          type: \"email\";\n          /** Optionally connect this field to a metafield within Shopify */\n          shopifyMetafield?:\n            | {\n                /** Whether this metafield is private */\n                privateMetafield?: boolean | undefined;\n                /** The namespace of the metafield */\n                namespace?: string | undefined;\n                /** The key of the metafield */\n                key?: string | undefined;\n                /** The type of the metafield */\n                metafieldType?: string | undefined;\n                /** Whether this metafield allows multiple entries */\n                allowMultipleEntries?: boolean | undefined;\n              }\n            | undefined;\n          /** The default value of the field for newly created records */\n          default?: string | undefined;\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                /** Validate this field's length is within a given range */\n                stringLength?:\n                  | {\n                      /** The minimum length of the field */\n                      min: number | null;\n                      /** The maximum length of the field */\n                      max: number | null;\n                    }\n                  | undefined;\n                /** Ensure values for this field match a regular expression */\n                regex?: (string | null)[] | undefined;\n                unique?:\n                  | (\n                      | {\n                          /** The field to scope the uniqueness validation by */\n                          scopeByField?: string | undefined;\n                          caseSensitive?: boolean | undefined;\n                        }\n                      | boolean\n                    )\n                  | undefined;\n                /** Validate values for this field with a JavaScript function from a file */\n                run?: (string | null)[] | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. url fields store a well-formatted URL as a string. */\n          type: \"url\";\n          /** Optionally connect this field to a metafield within Shopify */\n          shopifyMetafield?:\n            | {\n                /** Whether this metafield is private */\n                privateMetafield?: boolean | undefined;\n                /** The namespace of the metafield */\n                namespace?: string | undefined;\n                /** The key of the metafield */\n                key?: string | undefined;\n                /** The type of the metafield */\n                metafieldType?: string | undefined;\n                /** Whether this metafield allows multiple entries */\n                allowMultipleEntries?: boolean | undefined;\n              }\n            | undefined;\n          /** The default value of the field for newly created records */\n          default?: string | undefined;\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                /** Validate this field's length is within a given range */\n                stringLength?:\n                  | {\n                      /** The minimum length of the field */\n                      min: number | null;\n                      /** The maximum length of the field */\n                      max: number | null;\n                    }\n                  | undefined;\n                /** Ensure values for this field match a regular expression */\n                regex?: (string | null)[] | undefined;\n                unique?:\n                  | (\n                      | {\n                          /** The field to scope the uniqueness validation by */\n                          scopeByField?: string | undefined;\n                          caseSensitive?: boolean | undefined;\n                        }\n                      | boolean\n                    )\n                  | undefined;\n                /** Validate values for this field with a JavaScript function from a file */\n                run?: (string | null)[] | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. color fields store a well-formatted hex color as a string. */\n          type: \"color\";\n          /** Optionally connect this field to a metafield within Shopify */\n          shopifyMetafield?:\n            | {\n                /** Whether this metafield is private */\n                privateMetafield?: boolean | undefined;\n                /** The namespace of the metafield */\n                namespace?: string | undefined;\n                /** The key of the metafield */\n                key?: string | undefined;\n                /** The type of the metafield */\n                metafieldType?: string | undefined;\n                /** Whether this metafield allows multiple entries */\n                allowMultipleEntries?: boolean | undefined;\n              }\n            | undefined;\n          /** The default value of the field for newly created records */\n          default?: string | undefined;\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                /** Validate this field's length is within a given range */\n                stringLength?:\n                  | {\n                      /** The minimum length of the field */\n                      min: number | null;\n                      /** The maximum length of the field */\n                      max: number | null;\n                    }\n                  | undefined;\n                /** Ensure values for this field match a regular expression */\n                regex?: (string | null)[] | undefined;\n                /** Validate that the field value is a valid hex color string */\n                color?: boolean | undefined;\n                /** Validate values for this field with a JavaScript function from a file */\n                run?: (string | null)[] | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. json fields store arbitrary JSON, including objects, arrays, and primitive values. The value must be valid JSON. */\n          type: \"json\";\n          shopifyMetafield?:\n            | {\n                /** Whether this metafield is private */\n                privateMetafield?: boolean | undefined;\n                /** The namespace of the metafield */\n                namespace?: string | undefined;\n                /** The key of the metafield */\n                key?: string | undefined;\n                /** The type of the metafield */\n                metafieldType?: string | undefined;\n                /** Whether this metafield allows multiple entries */\n                allowMultipleEntries?: boolean | undefined;\n              }\n            | undefined;\n          /** The default value of the field for newly created records, represented as JSON */\n          default?: any | undefined;\n          /** The default value of the field for newly created records, represented as a string. Mutually exclusive with `default`. Prefer `default` over `defaultAsString`. */\n          defaultAsString?: string | undefined;\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                unique?:\n                  | (\n                      | {\n                          /** The field to scope the uniqueness validation by */\n                          scopeByField?: string | undefined;\n                        }\n                      | boolean\n                    )\n                  | undefined;\n                /** Validate values for this field with a JavaScript function from a file */\n                run?: (string | null)[] | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. enum fields store a single string or an array of strings constrained to a list of valid options (unless the `acceptUnlistedOptions` flag is set). */\n          type: \"enum\";\n          /** Optionally connect this field to a metafield within Shopify */\n          shopifyMetafield?:\n            | {\n                /** Whether this metafield is private */\n                privateMetafield?: boolean | undefined;\n                /** The namespace of the metafield */\n                namespace?: string | undefined;\n                /** The key of the metafield */\n                key?: string | undefined;\n                /** The type of the metafield */\n                metafieldType?: string | undefined;\n                /** Whether this metafield allows multiple entries */\n                allowMultipleEntries?: boolean | undefined;\n              }\n            | undefined;\n          /** The default value of the field for newly created records */\n          default?: (string | string[]) | undefined;\n          /** Whether this field stores an array or a single string selection */\n          acceptMultipleSelections?: boolean | undefined;\n          /** Whether this field accepts any option or only the listed options */\n          acceptUnlistedOptions?: boolean | undefined;\n          /** The list of available options for this field */\n          options: string[];\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                unique?:\n                  | (\n                      | {\n                          /** The field to scope the uniqueness validation by */\n                          scopeByField?: string | undefined;\n                        }\n                      | boolean\n                    )\n                  | undefined;\n                /** Validate values for this field with a JavaScript function from a file */\n                run?: (string | null)[] | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. boolean fields store one true or false value */\n          type: \"boolean\";\n          /** Optionally connect this field to a metafield within Shopify */\n          shopifyMetafield?:\n            | {\n                /** Whether this metafield is private */\n                privateMetafield?: boolean | undefined;\n                /** The namespace of the metafield */\n                namespace?: string | undefined;\n                /** The key of the metafield */\n                key?: string | undefined;\n                /** The type of the metafield */\n                metafieldType?: string | undefined;\n                /** Whether this metafield allows multiple entries */\n                allowMultipleEntries?: boolean | undefined;\n              }\n            | undefined;\n          /** The default value of the field for newly created records */\n          default?: boolean | undefined;\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                /** Validate values for this field with a JavaScript function from a file */\n                run?: (string | null)[] | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. dateTime fields store one timestamp with millisecond precision in the UTC timezone, or a date with day precision and no timezone if `includeTime` is off. */\n          type: \"dateTime\";\n          /** Optionally connect this field to a metafield within Shopify */\n          shopifyMetafield?:\n            | {\n                /** Whether this metafield is private */\n                privateMetafield?: boolean | undefined;\n                /** The namespace of the metafield */\n                namespace?: string | undefined;\n                /** The key of the metafield */\n                key?: string | undefined;\n                /** The type of the metafield */\n                metafieldType?: string | undefined;\n                /** Whether this metafield allows multiple entries */\n                allowMultipleEntries?: boolean | undefined;\n              }\n            | undefined;\n          /** Whether this field includes time */\n          includeTime?: boolean | undefined;\n          /** The default value of the field for newly created records */\n          default?: string | undefined;\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                unique?:\n                  | (\n                      | {\n                          /** The field to scope the uniqueness validation by */\n                          scopeByField?: string | undefined;\n                        }\n                      | boolean\n                    )\n                  | undefined;\n                /** Validate values for this field with a JavaScript function from a file */\n                run?: (string | null)[] | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. vector fields store a list of floats suitable for vector similarity operations. */\n          type: \"vector\";\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                /** Validate vectors stored in this field have a specific number of dimensions */\n                dimensionCount?: (number | null) | undefined;\n                /** Validate values for this field with a JavaScript function from a file */\n                run?: (string | null)[] | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. file fields store a reference to a single file uploaded to cloud storage. */\n          type: \"file\";\n          /** Whether this field allows public access */\n          allowPublicAccess?: boolean | undefined;\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                /** Validate this field's length is within a given range */\n                fileSizeRange?:\n                  | {\n                      /** The minimum length of the field */\n                      min: number | null;\n                      /** The maximum length of the field */\n                      max: number | null;\n                    }\n                  | undefined;\n                /** Validate values for this field with a JavaScript function from a file */\n                run?: (string | null)[] | undefined;\n                imagesOnly?:\n                  | (\n                      | boolean\n                      | {\n                          allowAnimatedImages: boolean;\n                        }\n                    )\n                  | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. encryptedString fields store a string that is encrypted at rest. */\n          type: \"encryptedString\";\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                /** Validate values for this field with a JavaScript function from a file */\n                run?: (string | null)[] | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The datatype of the field. computed fields store a value that is computed using a Gelly expression. */\n          type: \"computed\";\n          /** The source file of the field */\n          sourceFile?: (string | null) | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. belongsTo fields store an ID pointing to a record of the parent model. */\n          type: \"belongsTo\";\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                unique?:\n                  | (\n                      | {\n                          /** The field to scope the uniqueness validation by */\n                          scopeByField?: string | undefined;\n                        }\n                      | boolean\n                    )\n                  | undefined;\n                /** Validate values for this field with a JavaScript function from a file */\n                run?: (string | null)[] | undefined;\n              }\n            | undefined;\n          /** The api identifier of the parent model of the field */\n          parent?:\n            | {\n                model: string | null;\n              }\n            | undefined;\n          /** Optionally connect this field to a metafield within Shopify */\n          shopifyMetafield?:\n            | {\n                /** Whether this metafield is private */\n                privateMetafield?: boolean | undefined;\n                /** The namespace of the metafield */\n                namespace?: string | undefined;\n                /** The key of the metafield */\n                key?: string | undefined;\n                /** The type of the metafield */\n                metafieldType?: string | undefined;\n                /** Whether this metafield allows multiple entries */\n                allowMultipleEntries?: boolean | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. hasOne fields fetch a single record from a child model, powered by a belongsTo field on the child model. */\n          type: \"hasOne\";\n          /** The api identifier of the child model powering the field */\n          child?:\n            | {\n                /** The api identifier of the other model that this field creates a relationship with */\n                model: string | null;\n                /** The api identifier of the belongsTo field on the related model that powers this field */\n                belongsToField: string | null;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. hasMany fields fetch a list of records from a child model, powered by a belongsTo field on the child model. */\n          type: \"hasMany\";\n          children?:\n            | {\n                /** The api identifier of the other model that this field creates a relationship with */\n                model: string | null;\n                /** The api identifier of the belongsTo field on the related model that powers this field */\n                belongsToField: string | null;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. hasManyThrough fields fetch a list of sibling records, powered by an intermediate model with two belongsTos pointing at this model and the sibling model. */\n          type: \"hasManyThrough\";\n          /** The sibling model this field creates a relationship to */\n          sibling?:\n            | {\n                /** The api identifier of the sibling model */\n                model: string | null;\n                /** The api identifier of the inverse related field on the sibling model that points back at this model */\n                relatedField: string | null;\n              }\n            | undefined;\n          /** The intermediate join model that powers this hasManyThrough relationship to the sibling model */\n          join?:\n            | {\n                /** The api identifier of the intermediate join model */\n                model: string | null;\n                /** The api identifier of the belongsTo field on the intermediate join model that points to the this model */\n                belongsToSelfField: string | null;\n                /** The api identifier of the belongsTo field on the intermediate join model that points to the sibling model */\n                belongsToSiblingField: string | null;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. password fields store a hashed and salted bcrypt string. */\n          type: \"password\";\n          /** The set of validations to apply to this field when saving records of this model */\n          validations?:\n            | {\n                /** Validate that this field has a value for every record */\n                required?: boolean | undefined;\n                /** Validate that the field value is a strong password */\n                strongPassword?: boolean | undefined;\n              }\n            | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          /** The stored datatype of the field. roleAssignments fields store a list of role names from the app's role list. */\n          type: \"roleList\";\n          /** The default value of the field for newly created records */\n          default?: string[] | undefined;\n          /** The storage key addressing this field's data in the database */\n          storageKey: string;\n        }\n      | {\n          storageKey: string;\n          /** @deprecated This field type is deprecated. */\n          type: \"money\";\n          default?:\n            | {\n                amount: number;\n              }\n            | undefined;\n          currency?: string | undefined;\n        }\n      | {\n          storageKey: string;\n          /** @deprecated This field type is deprecated. */\n          type: \"recordState\";\n        };\n  };\n  /** Configuration for this model's connection to Shopify */\n  shopify?:\n    | {\n        /** The API identifiers of the fields to retrieve from Shopify */\n        fields?: string[] | undefined;\n      }\n    | undefined;\n};\n\nexport type { GadgetPermissions, GadgetSettings, GadgetModel };\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
