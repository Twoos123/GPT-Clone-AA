{
  "version": 3,
  "sources": ["../../src/vite/utils.ts"],
  "sourcesContent": ["import { remixViteOptions } from \"../remix\";\nimport { FrontendType } from \"./helpers\";\n\nconst getDefaultProductionBaseUrl = (assetsBucketDomain: string, applicationId: string, productionEnvironmentId: string): string => {\n  return `https://${assetsBucketDomain}/a/${applicationId}/${productionEnvironmentId}`;\n};\n/** A descriptor object that describes how different Gadget frontend types work for our use when building vite configs */\ntype InternalFrontendConfig = {\n  distPath: string;\n  manifestFilePath: string;\n  productionBaseUrl: (assetsBucketDomain: string, applicationId: string, productionEnvironmentId: string) => string;\n};\n\nexport const BaseRemixFrontendConfig: InternalFrontendConfig = {\n  distPath: `${remixViteOptions.buildDirectory}/client`,\n  manifestFilePath: `${remixViteOptions.buildDirectory}/.vite/client-manifest.json`,\n  productionBaseUrl: (assetsBucketDomain: string, applicationId: string, productionEnvironmentId: string) => {\n    return `${getDefaultProductionBaseUrl(assetsBucketDomain, applicationId, productionEnvironmentId)}/`;\n  },\n};\n\nexport const BaseViteFrontendConfig: InternalFrontendConfig = {\n  distPath: \".gadget/vite-dist\",\n  manifestFilePath: \".gadget/vite-dist/manifest.json\",\n  productionBaseUrl: getDefaultProductionBaseUrl,\n};\n\n/**\n * Get the frontend config for the given framework type.\n */\nexport const getInternalFrontendConfig = (frameworkType: FrontendType): InternalFrontendConfig => {\n  switch (frameworkType) {\n    case FrontendType.Remix:\n      return BaseRemixFrontendConfig;\n\n    case FrontendType.Vite:\n      return BaseViteFrontendConfig;\n\n    default:\n      throw new Error(`Unknown frontend type detected: ${frameworkType}`);\n  }\n};\n\n/**\n * Get the frontend type from the given indicator file content.\n */\nexport const getFrontendType = (indicatorFileContent: string): FrontendType => {\n  if (Object.values(FrontendType).includes(indicatorFileContent as any)) {\n    return indicatorFileContent as FrontendType;\n  }\n\n  throw new Error(`Unknown frontend type detected: ${indicatorFileContent}`);\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAiC;AACjC,qBAA6B;AAE7B,MAAM,8BAA8B,CAAC,oBAA4B,eAAuB,4BAA4C;AAClI,SAAO,WAAW,wBAAwB,iBAAiB;AAC7D;AAQO,MAAM,0BAAkD;AAAA,EAC7D,UAAU,GAAG,8BAAiB;AAAA,EAC9B,kBAAkB,GAAG,8BAAiB;AAAA,EACtC,mBAAmB,CAAC,oBAA4B,eAAuB,4BAAoC;AACzG,WAAO,GAAG,4BAA4B,oBAAoB,eAAe,uBAAuB;AAAA,EAClG;AACF;AAEO,MAAM,yBAAiD;AAAA,EAC5D,UAAU;AAAA,EACV,kBAAkB;AAAA,EAClB,mBAAmB;AACrB;AAKO,MAAM,4BAA4B,CAAC,kBAAwD;AAChG,UAAQ,eAAe;AAAA,IACrB,KAAK,4BAAa;AAChB,aAAO;AAAA,IAET,KAAK,4BAAa;AAChB,aAAO;AAAA,IAET;AACE,YAAM,IAAI,MAAM,mCAAmC,eAAe;AAAA,EACtE;AACF;AAKO,MAAM,kBAAkB,CAAC,yBAA+C;AAC7E,MAAI,OAAO,OAAO,2BAAY,EAAE,SAAS,oBAA2B,GAAG;AACrE,WAAO;AAAA,EACT;AAEA,QAAM,IAAI,MAAM,mCAAmC,sBAAsB;AAC3E;",
  "names": []
}
