{
  "version": 3,
  "sources": ["../../src/ai/index.ts"],
  "sourcesContent": ["import { Readable, type ReadableOptions } from \"stream\";\n\nclass OpenAIResponseStream extends Readable {\n  readonly openAIIterable: AsyncIterable<any>;\n  reading: boolean;\n  result: string;\n  responseContentType = \"application/octet-stream\";\n\n  constructor(openAIIterable: AsyncIterable<any>, options: ReadableOptions = {}) {\n    super(options);\n    this.openAIIterable = openAIIterable;\n    this.reading = false;\n    this.result = \"\";\n  }\n\n  processChunk(): (chunk: any) => string | undefined {\n    let isFunctionStreaming: boolean;\n\n    return (json) => {\n      if (json.choices[0]?.delta?.function_call?.name) {\n        isFunctionStreaming = true;\n        return `{\"function_call\": {\"name\": \"${json.choices[0]?.delta?.function_call.name}\", \"arguments\": \"`;\n      }\n\n      if (json.choices[0]?.delta?.function_call?.arguments) {\n        const argumentChunk: string = json.choices[0].delta.function_call.arguments;\n\n        const escapedPartialJson = argumentChunk\n          .replace(/\\\\/g, \"\\\\\\\\\") // Replace backslashes first to prevent double escaping\n          .replace(/\\//g, \"\\\\/\") // Escape slashes\n          .replace(/\"/g, '\\\\\"') // Escape double quotes\n          .replace(/\\n/g, \"\\\\n\") // Escape new lines\n          .replace(/\\r/g, \"\\\\r\") // Escape carriage returns\n          .replace(/\\t/g, \"\\\\t\") // Escape tabs\n          .replace(/\\f/g, \"\\\\f\"); // Escape form feeds\n\n        return `${escapedPartialJson}`;\n      }\n\n      if (isFunctionStreaming && (json.choices[0]?.finish_reason === \"function_call\" || json.choices[0]?.finish_reason === \"stop\")) {\n        isFunctionStreaming = false;\n        return '\"}}';\n      }\n\n      return json.choices?.[0]?.delta?.content ?? json.choices?.[0]?.text;\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  async _read() {\n    if (this.reading) return;\n    this.reading = true;\n    const process = this.processChunk();\n\n    try {\n      for await (const part of this.openAIIterable) {\n        const content = process(part);\n        if (content) {\n          this.result += content;\n          this.push(content);\n        }\n      }\n\n      this.push(null);\n      this.reading = false;\n    } catch (err) {\n      this.emit(\"error\", err);\n    }\n  }\n}\n\n/**\n * Represents options for the OpenAI response stream.\n */\nexport interface OpenAIResponseStreamOptions {\n  /**\n   * A callback function that will be invoked when the OpenAI response stream is complete.\n   * @param {string} content - The full output of the LLM response.\n   */\n  onComplete?: (content: string) => void;\n}\n\n/**\n * Converts the result of calling openai with `stream: true` into a readable stream that\n * Fasitfy can respond with.\n *\n *\n * @param {AsyncIterable<any>} stream - An AsyncIterable containing OpenAI response parts.\n * @param {OpenAIResponseStreamOptions} options - Options for the OpenAI response stream.\n * @returns {Readable} A Readable stream with the transformed content from the input stream.\n *\n *\n * @example\n * // Using the openAIResponseStream function to convert an AsyncIterable into a Readable stream\n * const stream = await connections.openai.chat.completions.create({\n *   model: \"gpt-3.5-turbo\",\n *   messages: [{ role: \"user\", content: \"Hello!\" }],\n *   stream: true,\n * });\n * await reply.send(openAIResponseStream(stream, {\n *  onComplete: (content) => { console.log(content) }\n * }));\n *\n * @see {@link https://github.com/openai/openai-node} - OpenAI Node.js client library.\n * @see {@link https://docs.gadget.dev/guides/http-routes/route-configuration#sending-responses} - Sending responses in Gadget.\n */\nexport function openAIResponseStream(openAIIterable: AsyncIterable<any>, options: OpenAIResponseStreamOptions = {}): Readable {\n  const stream = new OpenAIResponseStream(openAIIterable);\n\n  stream.on(\"end\", () => {\n    if (options.onComplete) options.onComplete(stream.result);\n  });\n\n  return stream;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA+C;AAE/C,MAAM,6BAA6B,uBAAS;AAAA,EAM1C,YAAY,gBAAoC,UAA2B,CAAC,GAAG;AAC7E,UAAM,OAAO;AAHf,+BAAsB;AAIpB,SAAK,iBAAiB;AACtB,SAAK,UAAU;AACf,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,eAAmD;AACjD,QAAI;AAEJ,WAAO,CAAC,SAAS;AACf,UAAI,KAAK,QAAQ,CAAC,GAAG,OAAO,eAAe,MAAM;AAC/C,8BAAsB;AACtB,eAAO,+BAA+B,KAAK,QAAQ,CAAC,GAAG,OAAO,cAAc;AAAA,MAC9E;AAEA,UAAI,KAAK,QAAQ,CAAC,GAAG,OAAO,eAAe,WAAW;AACpD,cAAM,gBAAwB,KAAK,QAAQ,CAAC,EAAE,MAAM,cAAc;AAElE,cAAM,qBAAqB,cACxB,QAAQ,OAAO,MAAM,EACrB,QAAQ,OAAO,KAAK,EACpB,QAAQ,MAAM,KAAK,EACnB,QAAQ,OAAO,KAAK,EACpB,QAAQ,OAAO,KAAK,EACpB,QAAQ,OAAO,KAAK,EACpB,QAAQ,OAAO,KAAK;AAEvB,eAAO,GAAG;AAAA,MACZ;AAEA,UAAI,wBAAwB,KAAK,QAAQ,CAAC,GAAG,kBAAkB,mBAAmB,KAAK,QAAQ,CAAC,GAAG,kBAAkB,SAAS;AAC5H,8BAAsB;AACtB,eAAO;AAAA,MACT;AAEA,aAAO,KAAK,UAAU,CAAC,GAAG,OAAO,WAAW,KAAK,UAAU,CAAC,GAAG;AAAA,IACjE;AAAA,EACF;AAAA;AAAA,EAGA,MAAM,QAAQ;AACZ,QAAI,KAAK;AAAS;AAClB,SAAK,UAAU;AACf,UAAM,UAAU,KAAK,aAAa;AAElC,QAAI;AACF,uBAAiB,QAAQ,KAAK,gBAAgB;AAC5C,cAAM,UAAU,QAAQ,IAAI;AAC5B,YAAI,SAAS;AACX,eAAK,UAAU;AACf,eAAK,KAAK,OAAO;AAAA,QACnB;AAAA,MACF;AAEA,WAAK,KAAK,IAAI;AACd,WAAK,UAAU;AAAA,IACjB,SAAS,KAAP;AACA,WAAK,KAAK,SAAS,GAAG;AAAA,IACxB;AAAA,EACF;AACF;AAqCO,SAAS,qBAAqB,gBAAoC,UAAuC,CAAC,GAAa;AAC5H,QAAM,SAAS,IAAI,qBAAqB,cAAc;AAEtD,SAAO,GAAG,OAAO,MAAM;AACrB,QAAI,QAAQ;AAAY,cAAQ,WAAW,OAAO,MAAM;AAAA,EAC1D,CAAC;AAED,SAAO;AACT;",
  "names": []
}
