{"version":3,"sources":["/app/packages/framework/src/effects.ts"],"sourceRoot":"/app","sourcesContent":["import type { AnyClient, InternalModelManager, RecordData } from \"@gadgetinc/api-client-core\";\nimport { ChangeTracking, GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport { InternalError, InvalidStateTransitionError, NoSessionForAuthenticationError, UserNotSetOnSessionError } from \"./errors\";\nimport { Globals, actionContextLocalStorage } from \"./globals\";\nimport { frameworkVersion, modelListIndex, modelsMap } from \"./metadata\";\nimport type {\n  AnyActionContext,\n  AnyAmbientContext,\n  AnyEffectContext,\n  AnyGlobalActionContext,\n  AnyParams,\n  ModelMetadata,\n  NotYetTyped,\n} from \"./types\";\nimport { assert } from \"./utils\";\n\nexport function getBelongsToRelationParams(model: ModelMetadata, params: Record<string, any>): Record<string, any> {\n  const belongsToParams: Record<string, any> = {};\n\n  for (const field of Object.values(model.fields) as any[]) {\n    if (field.fieldType != \"BelongsTo\") continue;\n    const modelParams = typeof params[model.apiIdentifier] === \"object\" ? params[model.apiIdentifier] : undefined;\n    const belongsToParam =\n      modelParams && typeof modelParams[field.apiIdentifier] === \"object\" ? modelParams[field.apiIdentifier] : undefined;\n    const belongsToId = belongsToParam?.[LINK_PARAM] !== undefined ? belongsToParam[LINK_PARAM] : belongsToParam?.id;\n    if (belongsToId !== undefined) {\n      belongsToParams[`${field.apiIdentifier}Id`] = belongsToId;\n    }\n  }\n\n  return belongsToParams;\n}\n\nexport function createGadgetRecord<Shape>(apiIdentifier: string, data: Shape): GadgetRecord<Shape & { __typename: string }> {\n  const model = getModelByApiIdentifier(apiIdentifier);\n  return new GadgetRecord({\n    ...data,\n    __typename: model.graphqlTypeName,\n  });\n}\n\n/**\n * Applies incoming API params (your modelâ€™s fields) to a record\n *\n * @param params - data passed from API calls, webhook events, or direct user inputs.\n * @param record - object used to pass params to\n */\nexport function applyParams(params: AnyParams, record: GadgetRecord<any>): void {\n  const model = getModelByTypename(record.__typename);\n  Object.assign(record, params[model.apiIdentifier], getBelongsToRelationParams(model, params));\n}\n\n/**\n * Get the internal model manager for the model from its maybe-namespaced spot\n */\nexport const internalModelManagerForModel = (api: AnyClient, apiIdentifier: string, namespace: string[]): InternalModelManager => {\n  const modelPath = [...namespace, apiIdentifier];\n  const manager: InternalModelManager | undefined = Globals.platformModules.lodash().get(api, [\"internal\", ...modelPath]);\n  if (!manager) {\n    throw new InternalError(\n      `Gadget needs but can't find an internal model manager for ${modelPath.join(\n        \".\"\n      )} on the API client -- has it finished regenerating or was it recently removed?`\n    );\n  }\n\n  return manager;\n};\n\n/**\n * Get the internal model manager for the model from its maybe-namespaced spot\n */\nexport const internalModelManagerForTypename = (api: AnyClient, typename: string): InternalModelManager => {\n  const model = getModelByTypename(typename);\n\n  return internalModelManagerForModel(api, model.apiIdentifier, model.namespace);\n};\n\n/**\n * Saves record to the database:\n * 1. Checks field validations of a given record, then saves the record to the database.\n * 2. Uses your apps Internal API to persist data. This API quickly interacts with data without running any business logic.\n *\n * @param record - object saved to the database\n */\nexport async function save(record: GadgetRecord<any>): Promise<void> {\n  const context = maybeGetActionContextFromLocalStorage();\n  const api = assert(context ? context.api : getCurrentContext().api, \"api client is missing from the current context\");\n  const model = getModelByTypename(record.__typename);\n\n  await (await Globals.modelValidator(model.key)).validate({ api, logger: Globals.logger }, record);\n\n  const internalModelManager = internalModelManagerForTypename(api, record.__typename);\n\n  let result: GadgetRecord<any>;\n\n  if (\"createdAt\" in record && record.createdAt) {\n    result = await internalModelManager.update(record.id, {\n      [model.apiIdentifier]: changedAttributes(model, record),\n    });\n  } else {\n    result = await internalModelManager.create({\n      [model.apiIdentifier]: writableAttributes(model, record),\n    });\n  }\n\n  Object.assign(record, { ...result });\n  record.flushChanges(ChangeTracking.SinceLastPersisted);\n}\n\n/**\n * Deletes record from the database.\n *\n * @param record - object deleted from the database\n */\nexport async function deleteRecord(record: GadgetRecord<any>): Promise<void> {\n  const context = maybeGetActionContextFromLocalStorage();\n\n  const api = assert(context ? context.api : getCurrentContext().api, \"api client is missing from the current context\");\n  const scope = context ? context.scope : {};\n\n  const id = assert(record.id, `record.id not set on record in scope, has the record been persisted?`);\n\n  const internalModelManager = internalModelManagerForTypename(api, record.__typename);\n  await internalModelManager.delete(id);\n\n  scope.recordDeleted = true;\n}\n\nexport function transitionState(\n  record: GadgetRecord<any>,\n  transition: {\n    from?: string | Record<string, string>;\n    to: string | Record<string, string>;\n  }\n): void {\n  const model = getModelByTypename(record.__typename);\n  const isShopifyModel =\n    model.apiIdentifier === \"shopifyShop\" || model.apiIdentifier === \"shopifySync\" || model.apiIdentifier === \"shopifyBulkOperation\";\n\n  if (isShopifyModel && doesVersionSupportSourceControl()) {\n    // In apps framework version 1.0.0+, we handle the state transition internally to Shopify models based on the above API identifiers.\n    // This function becomes a no-op for those models.\n    return;\n  }\n\n  const stringRecordState = typeof record.state === \"string\" ? record.state : JSON.stringify(record.state);\n  const stringTransitionFrom = typeof transition.from === \"string\" ? transition.from : JSON.stringify(transition.from);\n\n  if (transition.from && stringRecordState !== stringTransitionFrom) {\n    throw new InvalidStateTransitionError(undefined, {\n      state: record.state,\n      expectedFrom: transition.from,\n    });\n  }\n\n  record.state = transition.to;\n}\n\nexport function legacySetUser(): void {\n  const context = getActionContextFromLocalStorage();\n\n  if (!context.scope.authenticatedUser) {\n    throw new UserNotSetOnSessionError(\n      \"The authenticated user could not be saved to the session when logging in. Make sure the user has a role assigned to them.\"\n    );\n  }\n  if (!context.session) {\n    throw new NoSessionForAuthenticationError(\n      \"Unable to authenticate because the request was made with no session in context to transition.\"\n    );\n  }\n  context.session.set(\"user\", { [LINK_PARAM]: context.scope.authenticatedUser.id });\n}\n\nexport function legacyUnsetUser(): void {\n  const context = getActionContextFromLocalStorage();\n\n  if (!context.session) {\n    throw new NoSessionForAuthenticationError(\"Unable to unset users on session because the request was made with no session.\");\n  }\n  context.session.delete(\"user\");\n}\n\nexport async function legacySuccessfulAuthentication(params: AnyParams): Promise<void> {\n  const context = getActionContextFromLocalStorage();\n  const { api, scope } = context;\n  const manager = api.internal.user as InternalModelManager;\n\n  const user = (await manager.findMany({ filter: { email: { equals: params.email } } }))[0];\n  let result = false;\n  if (user && params.password && user.password?.hash) {\n    if (await Globals.platformModules.bcrypt().compare(params.password, user.password.hash)) {\n      scope.authenticatedUser = user;\n      result = true;\n    }\n  }\n  Globals.logger.info({ email: params.email, userId: user?.id, result }, \"login attempt\");\n\n  if (!result) {\n    throw new Error(\"Invalid email or password\");\n  }\n}\n\n/**\n * @private helper functions and variables\n */\n\nexport function doesVersionSupportSourceControl(): boolean {\n  return Globals.platformModules.compareVersions().satisfies(frameworkVersion, \">=1.0.0\");\n}\n\n/**\n * @private Get action context without `params` and `record` from async local storage.\n */\nexport function getActionContextFromLocalStorage(): AnyActionContext | AnyGlobalActionContext | AnyEffectContext {\n  return assert(actionContextLocalStorage.getStore(), \"this effect function should only be called from within an action\");\n}\n\n/**\n * @private Similar to `getActionContextFromLocalStorage` but returns `undefined` if there is no action context. (i.e. possibly called from a route)\n */\nexport function maybeGetActionContextFromLocalStorage(): AnyActionContext | AnyGlobalActionContext | AnyEffectContext | undefined {\n  return actionContextLocalStorage.getStore();\n}\n\nexport function getCurrentContext(): AnyAmbientContext {\n  return assert(Globals.requestContext.get(\"requestContext\"), \"no gadget context found on request\");\n}\n\nexport const LINK_PARAM = \"_link\";\n\nexport function writableAttributes(model: ModelMetadata, record: GadgetRecord<RecordData>): Record<string, any> {\n  const fieldsByApiIdentifier = Globals.platformModules.lodash().keyBy(Object.values(model.fields) as NotYetTyped[], \"apiIdentifier\");\n  return Globals.platformModules.lodash().pickBy(record, (v: any, k: any) => {\n    const field = fieldsByApiIdentifier[k];\n    if (!field) return false;\n\n    const isRelationshipField =\n      field.fieldType === FieldType.HasMany || field.fieldType === FieldType.HasOne || field.fieldType === FieldType.HasManyThrough;\n\n    if (isRelationshipField && v === null) {\n      return false;\n    }\n\n    return field.internalWritable;\n  });\n}\n\nexport function changedAttributes(model: ModelMetadata, record: GadgetRecord<RecordData>): Record<string, any> {\n  const changes = record.changes();\n  const attributes = Object.keys(changes).reduce((attrs, key) => {\n    attrs[key] = record[key];\n    return attrs;\n  }, {} as any);\n  return writableAttributes(model, attributes);\n}\n\nexport const getModelByApiIdentifier = (apiIdentifier: string): ModelMetadata => {\n  const typename = modelListIndex[`api:${apiIdentifier}`];\n  if (!typename) {\n    throw new InternalError(`Model ${apiIdentifier} not found in available model metadata`, {\n      availableApiIdentifiers: Object.keys(modelListIndex),\n    });\n  }\n\n  return getModelByTypename(typename);\n};\n\nexport const getModelByTypename = (typename: string): ModelMetadata => {\n  if (!typename) {\n    throw new InternalError(`No typename found on record, __typename must be set for accessing model metadata`);\n  }\n\n  const model = modelsMap[typename];\n  if (!model) {\n    throw new InternalError(`Model with typename ${typename} not found in available model metadata`, {\n      availableTypenames: Object.keys(modelsMap),\n    });\n  }\n\n  return model;\n};\n\nexport enum FieldType {\n  ID = \"ID\",\n  Number = \"Number\",\n  String = \"String\",\n  Enum = \"Enum\",\n  RichText = \"RichText\",\n  DateTime = \"DateTime\",\n  Email = \"Email\",\n  URL = \"URL\",\n  Money = \"Money\",\n  File = \"File\",\n  Color = \"Color\",\n  Password = \"Password\",\n  Computed = \"Computed\",\n  HasManyThrough = \"HasManyThrough\",\n  BelongsTo = \"BelongsTo\",\n  HasMany = \"HasMany\",\n  HasOne = \"HasOne\",\n  Boolean = \"Boolean\",\n  Model = \"Model\",\n  Object = \"Object\",\n  Array = \"Array\",\n  JSON = \"JSON\",\n  Code = \"Code\",\n  EncryptedString = \"EncryptedString\",\n  Vector = \"Vector\",\n  /**\n   * Any value at all.\n   * Prefer FieldType.JSON where possible, it's more descriptive.\n   */\n  Any = \"Any\",\n  Null = \"Null\",\n  RecordState = \"RecordState\",\n  RoleAssignments = \"RoleAssignments\",\n}\n"],"names":["LINK_PARAM","applyParams","changedAttributes","createGadgetRecord","deleteRecord","doesVersionSupportSourceControl","getActionContextFromLocalStorage","getBelongsToRelationParams","getCurrentContext","getModelByApiIdentifier","getModelByTypename","internalModelManagerForModel","internalModelManagerForTypename","legacySetUser","legacySuccessfulAuthentication","legacyUnsetUser","maybeGetActionContextFromLocalStorage","save","transitionState","writableAttributes","model","params","belongsToParams","field","Object","values","fields","fieldType","modelParams","apiIdentifier","undefined","belongsToParam","belongsToId","id","data","GadgetRecord","__typename","graphqlTypeName","record","assign","api","namespace","modelPath","manager","Globals","platformModules","lodash","get","InternalError","join","typename","context","assert","modelValidator","key","validate","logger","internalModelManager","result","createdAt","update","create","flushChanges","ChangeTracking","SinceLastPersisted","scope","delete","recordDeleted","transition","isShopifyModel","stringRecordState","state","JSON","stringify","stringTransitionFrom","from","InvalidStateTransitionError","expectedFrom","to","authenticatedUser","UserNotSetOnSessionError","session","NoSessionForAuthenticationError","set","internal","user","findMany","filter","email","equals","password","hash","bcrypt","compare","info","userId","Error","compareVersions","satisfies","frameworkVersion","actionContextLocalStorage","getStore","requestContext","fieldsByApiIdentifier","keyBy","pickBy","v","k","isRelationshipField","internalWritable","changes","attributes","keys","reduce","attrs","modelListIndex","availableApiIdentifiers","modelsMap","availableTypenames","FieldType"],"mappings":";;;;;;;;;;;;;;IAsOaA,UAAU;eAAVA;;IAvLGC,WAAW;eAAXA;;IA0MAC,iBAAiB;eAAjBA;;IAxNAC,kBAAkB;eAAlBA;;IAkFMC,YAAY;eAAZA;;IA6FNC,+BAA+B;eAA/BA;;IAOAC,gCAAgC;eAAhCA;;IAvMAC,0BAA0B;eAA1BA;;IAkNAC,iBAAiB;eAAjBA;;IAgCHC,uBAAuB;eAAvBA;;IAWAC,kBAAkB;eAAlBA;;IAtNAC,4BAA4B;eAA5BA;;IAiBAC,+BAA+B;eAA/BA;;IAuFGC,aAAa;eAAbA;;IAyBMC,8BAA8B;eAA9BA;;IATNC,eAAe;eAAfA;;IA+CAC,qCAAqC;eAArCA;;IAzIMC,IAAI;eAAJA;;IA4CNC,eAAe;eAAfA;;IAuGAC,kBAAkB;eAAlBA;;;;yBAvO6B;;;;;;wBACyE;yBACnE;0BACS;uBAUrC;AAEhB,SAASZ,2BAA2Ba,KAAoB,EAAEC,MAA2B;IAC1F,MAAMC,kBAAuC,CAAC;IAE9C,KAAK,MAAMC,SAASC,OAAOC,MAAM,CAACL,MAAMM,MAAM,EAAY;QACxD,IAAIH,MAAMI,SAAS,IAAI,aAAa;QACpC,MAAMC,cAAc,OAAOP,MAAM,CAACD,MAAMS,aAAa,CAAC,KAAK,WAAWR,MAAM,CAACD,MAAMS,aAAa,CAAC,GAAGC;QACpG,MAAMC,iBACJH,eAAe,OAAOA,WAAW,CAACL,MAAMM,aAAa,CAAC,KAAK,WAAWD,WAAW,CAACL,MAAMM,aAAa,CAAC,GAAGC;QAC3G,MAAME,cAAcD,gBAAgB,CAAC/B,WAAW,KAAK8B,YAAYC,cAAc,CAAC/B,WAAW,GAAG+B,gBAAgBE;QAC9G,IAAID,gBAAgBF,WAAW;YAC7BR,eAAe,CAAC,CAAC,EAAEC,MAAMM,aAAa,CAAC,EAAE,CAAC,CAAC,GAAGG;QAChD;IACF;IAEA,OAAOV;AACT;AAEO,SAASnB,mBAA0B0B,aAAqB,EAAEK,IAAW;IAC1E,MAAMd,QAAQX,wBAAwBoB;IACtC,OAAO,IAAIM,CAAAA,gBAAW,cAAC,CAAC;QACtB,GAAGD,IAAI;QACPE,YAAYhB,MAAMiB,eAAe;IACnC;AACF;AAQO,SAASpC,YAAYoB,MAAiB,EAAEiB,MAAyB;IACtE,MAAMlB,QAAQV,mBAAmB4B,OAAOF,UAAU;IAClDZ,OAAOe,MAAM,CAACD,QAAQjB,MAAM,CAACD,MAAMS,aAAa,CAAC,EAAEtB,2BAA2Ba,OAAOC;AACvF;AAKO,MAAMV,+BAA+B,CAAC6B,KAAgBX,eAAuBY;IAClF,MAAMC,YAAY;WAAID;QAAWZ;KAAc;IAC/C,MAAMc,UAA4CC,gBAAO,CAACC,eAAe,CAACC,MAAM,GAAGC,GAAG,CAACP,KAAK;QAAC;WAAeE;KAAU;IACtH,IAAI,CAACC,SAAS;QACZ,MAAM,IAAIK,qBAAa,CACrB,CAAC,0DAA0D,EAAEN,UAAUO,IAAI,CACzE,KACA,8EAA8E,CAAC;IAErF;IAEA,OAAON;AACT;AAKO,MAAM/B,kCAAkC,CAAC4B,KAAgBU;IAC9D,MAAM9B,QAAQV,mBAAmBwC;IAEjC,OAAOvC,6BAA6B6B,KAAKpB,MAAMS,aAAa,EAAET,MAAMqB,SAAS;AAC/E;AASO,eAAexB,KAAKqB,MAAyB;IAClD,MAAMa,UAAUnC;IAChB,MAAMwB,MAAMY,IAAAA,aAAM,EAACD,UAAUA,QAAQX,GAAG,GAAGhC,oBAAoBgC,GAAG,EAAE;IACpE,MAAMpB,QAAQV,mBAAmB4B,OAAOF,UAAU;IAElD,MAAM,AAAC,CAAA,MAAMQ,gBAAO,CAACS,cAAc,CAACjC,MAAMkC,GAAG,CAAA,EAAGC,QAAQ,CAAC;QAAEf;QAAKgB,QAAQZ,gBAAO,CAACY,MAAM;IAAC,GAAGlB;IAE1F,MAAMmB,uBAAuB7C,gCAAgC4B,KAAKF,OAAOF,UAAU;IAEnF,IAAIsB;IAEJ,IAAI,eAAepB,UAAUA,OAAOqB,SAAS,EAAE;QAC7CD,SAAS,MAAMD,qBAAqBG,MAAM,CAACtB,OAAOL,EAAE,EAAE;YACpD,CAACb,MAAMS,aAAa,CAAC,EAAE3B,kBAAkBkB,OAAOkB;QAClD;IACF,OAAO;QACLoB,SAAS,MAAMD,qBAAqBI,MAAM,CAAC;YACzC,CAACzC,MAAMS,aAAa,CAAC,EAAEV,mBAAmBC,OAAOkB;QACnD;IACF;IAEAd,OAAOe,MAAM,CAACD,QAAQ;QAAE,GAAGoB,MAAM;IAAC;IAClCpB,OAAOwB,YAAY,CAACC,+BAAc,CAACC,kBAAkB;AACvD;AAOO,eAAe5D,aAAakC,MAAyB;IAC1D,MAAMa,UAAUnC;IAEhB,MAAMwB,MAAMY,IAAAA,aAAM,EAACD,UAAUA,QAAQX,GAAG,GAAGhC,oBAAoBgC,GAAG,EAAE;IACpE,MAAMyB,QAAQd,UAAUA,QAAQc,KAAK,GAAG,CAAC;IAEzC,MAAMhC,KAAKmB,IAAAA,aAAM,EAACd,OAAOL,EAAE,EAAE,CAAC,oEAAoE,CAAC;IAEnG,MAAMwB,uBAAuB7C,gCAAgC4B,KAAKF,OAAOF,UAAU;IACnF,MAAMqB,qBAAqBS,MAAM,CAACjC;IAElCgC,MAAME,aAAa,GAAG;AACxB;AAEO,SAASjD,gBACdoB,MAAyB,EACzB8B,UAGC;IAED,MAAMhD,QAAQV,mBAAmB4B,OAAOF,UAAU;IAClD,MAAMiC,iBACJjD,MAAMS,aAAa,KAAK,iBAAiBT,MAAMS,aAAa,KAAK,iBAAiBT,MAAMS,aAAa,KAAK;IAE5G,IAAIwC,kBAAkBhE,mCAAmC;QACvD,oIAAoI;QACpI,kDAAkD;QAClD;IACF;IAEA,MAAMiE,oBAAoB,OAAOhC,OAAOiC,KAAK,KAAK,WAAWjC,OAAOiC,KAAK,GAAGC,KAAKC,SAAS,CAACnC,OAAOiC,KAAK;IACvG,MAAMG,uBAAuB,OAAON,WAAWO,IAAI,KAAK,WAAWP,WAAWO,IAAI,GAAGH,KAAKC,SAAS,CAACL,WAAWO,IAAI;IAEnH,IAAIP,WAAWO,IAAI,IAAIL,sBAAsBI,sBAAsB;QACjE,MAAM,IAAIE,mCAA2B,CAAC9C,WAAW;YAC/CyC,OAAOjC,OAAOiC,KAAK;YACnBM,cAAcT,WAAWO,IAAI;QAC/B;IACF;IAEArC,OAAOiC,KAAK,GAAGH,WAAWU,EAAE;AAC9B;AAEO,SAASjE;IACd,MAAMsC,UAAU7C;IAEhB,IAAI,CAAC6C,QAAQc,KAAK,CAACc,iBAAiB,EAAE;QACpC,MAAM,IAAIC,gCAAwB,CAChC;IAEJ;IACA,IAAI,CAAC7B,QAAQ8B,OAAO,EAAE;QACpB,MAAM,IAAIC,uCAA+B,CACvC;IAEJ;IACA/B,QAAQ8B,OAAO,CAACE,GAAG,CAAC,QAAQ;QAAE,CAACnF,WAAW,EAAEmD,QAAQc,KAAK,CAACc,iBAAiB,CAAC9C,EAAE;IAAC;AACjF;AAEO,SAASlB;IACd,MAAMoC,UAAU7C;IAEhB,IAAI,CAAC6C,QAAQ8B,OAAO,EAAE;QACpB,MAAM,IAAIC,uCAA+B,CAAC;IAC5C;IACA/B,QAAQ8B,OAAO,CAACf,MAAM,CAAC;AACzB;AAEO,eAAepD,+BAA+BO,MAAiB;IACpE,MAAM8B,UAAU7C;IAChB,MAAM,EAAEkC,GAAG,EAAEyB,KAAK,EAAE,GAAGd;IACvB,MAAMR,UAAUH,IAAI4C,QAAQ,CAACC,IAAI;IAEjC,MAAMA,OAAO,AAAC,CAAA,MAAM1C,QAAQ2C,QAAQ,CAAC;QAAEC,QAAQ;YAAEC,OAAO;gBAAEC,QAAQpE,OAAOmE,KAAK;YAAC;QAAE;IAAE,EAAC,CAAE,CAAC,EAAE;IACzF,IAAI9B,SAAS;IACb,IAAI2B,QAAQhE,OAAOqE,QAAQ,IAAIL,KAAKK,QAAQ,EAAEC,MAAM;QAClD,IAAI,MAAM/C,gBAAO,CAACC,eAAe,CAAC+C,MAAM,GAAGC,OAAO,CAACxE,OAAOqE,QAAQ,EAAEL,KAAKK,QAAQ,CAACC,IAAI,GAAG;YACvF1B,MAAMc,iBAAiB,GAAGM;YAC1B3B,SAAS;QACX;IACF;IACAd,gBAAO,CAACY,MAAM,CAACsC,IAAI,CAAC;QAAEN,OAAOnE,OAAOmE,KAAK;QAAEO,QAAQV,MAAMpD;QAAIyB;IAAO,GAAG;IAEvE,IAAI,CAACA,QAAQ;QACX,MAAM,IAAIsC,MAAM;IAClB;AACF;AAMO,SAAS3F;IACd,OAAOuC,gBAAO,CAACC,eAAe,CAACoD,eAAe,GAAGC,SAAS,CAACC,0BAAgB,EAAE;AAC/E;AAKO,SAAS7F;IACd,OAAO8C,IAAAA,aAAM,EAACgD,kCAAyB,CAACC,QAAQ,IAAI;AACtD;AAKO,SAASrF;IACd,OAAOoF,kCAAyB,CAACC,QAAQ;AAC3C;AAEO,SAAS7F;IACd,OAAO4C,IAAAA,aAAM,EAACR,gBAAO,CAAC0D,cAAc,CAACvD,GAAG,CAAC,mBAAmB;AAC9D;AAEO,MAAM/C,aAAa;AAEnB,SAASmB,mBAAmBC,KAAoB,EAAEkB,MAAgC;IACvF,MAAMiE,wBAAwB3D,gBAAO,CAACC,eAAe,CAACC,MAAM,GAAG0D,KAAK,CAAChF,OAAOC,MAAM,CAACL,MAAMM,MAAM,GAAoB;IACnH,OAAOkB,gBAAO,CAACC,eAAe,CAACC,MAAM,GAAG2D,MAAM,CAACnE,QAAQ,CAACoE,GAAQC;QAC9D,MAAMpF,QAAQgF,qBAAqB,CAACI,EAAE;QACtC,IAAI,CAACpF,OAAO,OAAO;QAEnB,MAAMqF,sBACJrF,MAAMI,SAAS,kBAA0BJ,MAAMI,SAAS,iBAAyBJ,MAAMI,SAAS;QAElG,IAAIiF,uBAAuBF,MAAM,MAAM;YACrC,OAAO;QACT;QAEA,OAAOnF,MAAMsF,gBAAgB;IAC/B;AACF;AAEO,SAAS3G,kBAAkBkB,KAAoB,EAAEkB,MAAgC;IACtF,MAAMwE,UAAUxE,OAAOwE,OAAO;IAC9B,MAAMC,aAAavF,OAAOwF,IAAI,CAACF,SAASG,MAAM,CAAC,CAACC,OAAO5D;QACrD4D,KAAK,CAAC5D,IAAI,GAAGhB,MAAM,CAACgB,IAAI;QACxB,OAAO4D;IACT,GAAG,CAAC;IACJ,OAAO/F,mBAAmBC,OAAO2F;AACnC;AAEO,MAAMtG,0BAA0B,CAACoB;IACtC,MAAMqB,WAAWiE,wBAAc,CAAC,CAAC,IAAI,EAAEtF,cAAc,CAAC,CAAC;IACvD,IAAI,CAACqB,UAAU;QACb,MAAM,IAAIF,qBAAa,CAAC,CAAC,MAAM,EAAEnB,cAAc,sCAAsC,CAAC,EAAE;YACtFuF,yBAAyB5F,OAAOwF,IAAI,CAACG,wBAAc;QACrD;IACF;IAEA,OAAOzG,mBAAmBwC;AAC5B;AAEO,MAAMxC,qBAAqB,CAACwC;IACjC,IAAI,CAACA,UAAU;QACb,MAAM,IAAIF,qBAAa,CAAC,CAAC,gFAAgF,CAAC;IAC5G;IAEA,MAAM5B,QAAQiG,mBAAS,CAACnE,SAAS;IACjC,IAAI,CAAC9B,OAAO;QACV,MAAM,IAAI4B,qBAAa,CAAC,CAAC,oBAAoB,EAAEE,SAAS,sCAAsC,CAAC,EAAE;YAC/FoE,oBAAoB9F,OAAOwF,IAAI,CAACK,mBAAS;QAC3C;IACF;IAEA,OAAOjG;AACT;;UAEYmG;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BV;;;GAGC;;;;GA7BSA,cAAAA"}