{"version":3,"sources":["/app/packages/framework/src/shopify/effects.ts"],"sourceRoot":"/app","sourcesContent":["import { GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport {\n  FieldType,\n  LINK_PARAM,\n  getActionContextFromLocalStorage,\n  getCurrentContext,\n  internalModelManagerForModel,\n  maybeGetActionContextFromLocalStorage,\n} from \"../effects\";\nimport { InvalidActionInputError, MisconfiguredActionError, PermissionDeniedError } from \"../errors\";\nimport { Globals } from \"../globals\";\nimport { AppTenancyKey } from \"../tenancy\";\nimport type { AnyParams, FieldMetadata, ModelDescriptor } from \"../types\";\nimport { assert } from \"../utils\";\n\nexport const ShopifyShopState = {\n  Installed: { created: \"installed\" },\n  Uninstalled: { created: \"uninstalled\" },\n};\n\nexport const ShopifySyncState = {\n  Created: \"created\",\n  Running: \"running\",\n  Completed: \"completed\",\n  Errored: \"errored\",\n};\n\nexport const ShopifyBulkOperationState = {\n  Created: \"created\",\n  Completed: \"completed\",\n  Canceled: \"canceled\",\n  Failed: \"failed\",\n  Expired: \"expired\",\n};\n\nexport const ShopifySellingPlanGroupProductVariantState = {\n  Started: \"started\",\n  Created: \"created\",\n  Deleted: \"deleted\",\n};\n\nexport const ShopifySellingPlanGroupProductState = {\n  Started: \"started\",\n  Created: \"created\",\n  Deleted: \"deleted\",\n};\n\n/**\n * The following is used to power shopifySync model.\n * Learn more about syncing visit our docs: https://docs.gadget.dev/guides/plugins/shopify/syncing-shopify-data#syncing\n */\nexport async function shopifySync(params: AnyParams, record: GadgetRecord<any>): Promise<void> {\n  const context = getActionContextFromLocalStorage();\n  const effectAPIs = context.effectAPIs;\n\n  const syncRecord: { syncSince?: Date; id: bigint; shopId: string; models: any; force: boolean } = assert(\n    record,\n    \"cannot start a shop sync from this action\"\n  );\n\n  const shopId = assert(syncRecord.shopId, \"a shop is required to start a sync\");\n\n  if (!syncRecord.models || (Array.isArray(syncRecord.models) && syncRecord.models.every((m) => typeof m == \"string\"))) {\n    try {\n      await effectAPIs.sync(\n        syncRecord.id.toString(),\n        shopId,\n        syncRecord.syncSince,\n        syncRecord.models,\n        syncRecord.force,\n        params.startReason\n      );\n    } catch (error) {\n      Globals.logger.error({ error, connectionSyncId: syncRecord.id }, \"an error occurred starting shop sync\");\n      throw error;\n    }\n  } else {\n    throw new InvalidActionInputError(\"Models must be an array of api identifiers\");\n  }\n}\n\nexport async function abortSync(params: AnyParams, record: GadgetRecord<any>): Promise<void> {\n  const context = getActionContextFromLocalStorage();\n  const effectAPIs = context.effectAPIs;\n\n  const syncRecord: { id: bigint } = assert(record, \"a record is required to abort a shop sync\");\n\n  const syncId = assert(syncRecord.id, \"a sync id is required to start a sync\");\n\n  if (!params.errorMessage) {\n    record.errorMessage = \"Sync aborted\";\n  }\n\n  Globals.logger.info({ userVisible: true, connectionSyncId: syncId }, \"aborting sync\");\n\n  try {\n    await effectAPIs.abortSync(syncId.toString());\n  } catch (error) {\n    Globals.logger.error({ error, connectionSyncId: syncId }, \"an error occurred aborting sync\");\n    throw error;\n  }\n}\n\n/**\n * Applicable for multi-tenant Shopify apps(public apps), or Shopify Customer Extension apps\n * Enforces that the given record is only accessible by the current shop or customer\n *\n * For new records: sets the the current session's `shopId` to the record. If the tenant is a customer then will set the current sessions' customerId to the record.\n * For existing records: Verifies the record objects `shopId` and/or `customerId` matches the one from the current session.\n *\n * *\n * @param params - incoming data validated against the current `shopId`\n * @param record - record used to validate or set the `shopId` on\n * @param {Object} options - Additional options for cross-shop or cross-customer validation\n * @param {string} options.shopBelongsToField - Specifies which related model is used for cross-shop validation.\n * @param {string} options.customerBelongsToField - Specifies which related model is used for cross-customer validation.\n * @param {boolean} options.enforceCustomerTenancy - Whether or not to enforce customer tenacy. Defaults to true.\n */\nexport async function preventCrossShopDataAccess(\n  params: AnyParams,\n  record: GadgetRecord<any>,\n  options?: { shopBelongsToField?: string; customerBelongsToField?: string; enforceCustomerTenancy?: boolean }\n): Promise<void> {\n  const enforceCustomerTenancy = options?.enforceCustomerTenancy ?? true;\n  const context = getActionContextFromLocalStorage();\n\n  if (context.type != \"effect\") {\n    throw new Error(\"Can't prevent cross shop data access outside of an action effect\");\n  }\n  if (!params) {\n    throw new Error(\n      \"The `params` parameter is required in preventCrossShopDataAccess(params, record, options?: { shopBelongsToField: string })\"\n    );\n  }\n  if (!record) {\n    throw new Error(\n      \"The `record` parameter is required in preventCrossShopDataAccess(params, record, options?: { shopBelongsToField: string })\"\n    );\n  }\n  const model = context.model;\n  const appTenancy = context[AppTenancyKey];\n  const shopBelongsToField = options?.shopBelongsToField;\n  const customerBelongsToField = options?.customerBelongsToField;\n\n  // if there's no tenancy let's continue\n  if (appTenancy?.shopify?.shopId === undefined) {\n    return;\n  }\n  // if this effect is not run in the context of a model then it does not apply\n  if (!model) {\n    return;\n  }\n\n  const shopId = String(appTenancy.shopify.shopId);\n  const customerId = appTenancy.shopify.customerId ? String(appTenancy.shopify.customerId) : undefined;\n\n  const input = params[model.apiIdentifier];\n  validateBelongsToLink(input, record, params, shopId, model, ShopifyShopKey, shopBelongsToField, TenantType.Shop);\n\n  if (customerId && enforceCustomerTenancy) {\n    validateBelongsToLink(input, record, params, customerId, model, ShopifyCustomerKey, customerBelongsToField, TenantType.Customer);\n  }\n}\n\nconst validateBelongsToLink = (\n  input: any,\n  record: any,\n  params: AnyParams,\n  tenantId: string,\n  model: ModelDescriptor,\n  relatedModelKey: string,\n  tenantBelongsToField: string | undefined,\n  tenantType: TenantType\n) => {\n  if (relatedModelKey != ShopifyShopKey && relatedModelKey != ShopifyCustomerKey) {\n    throw new Error(\"Validation for tenancy can only be for Shopify Shop or Shopify Customer models\");\n  }\n  // If this effect is being added to the related tenant model (Shopify Shop or Shopify Customer), simply compare the record's ID\n  if (model.key == relatedModelKey) {\n    if (record && String(record.id) !== tenantId) {\n      throw new PermissionDeniedError();\n    }\n    return;\n  }\n\n  const fieldsIsBelongsToRelatedModel = Object.values(model.fields).filter(\n    (f) => f.fieldType === (FieldType.BelongsTo as string) && f.configuration.relatedModelKey === relatedModelKey\n  );\n\n  if (fieldsIsBelongsToRelatedModel.length === 0) {\n    throw new MisconfiguredActionError(`This model is missing a related ${tenantType} field.`);\n  }\n\n  if (fieldsIsBelongsToRelatedModel.length > 1 && !tenantBelongsToField) {\n    throw new MisconfiguredActionError(\n      `This function is missing a related ${tenantType} field option. \\`${tenantType}BelongsToField\\` is a required option parameter if the model has more than one related ${tenantType} field.`\n    );\n  }\n  let relatedTenantField = fieldsIsBelongsToRelatedModel[0];\n\n  if (tenantBelongsToField) {\n    const selectedField = Object.values(model.fields).find((f) => f.apiIdentifier === tenantBelongsToField);\n    if (!selectedField) {\n      throw new MisconfiguredActionError(`The selected ${tenantType} relation field does not exist.`);\n    }\n\n    if (selectedField.fieldType !== (FieldType.BelongsTo as string) || selectedField.configuration.relatedModelKey !== relatedModelKey) {\n      throw new MisconfiguredActionError(\n        `The selected ${tenantType} relation field should be a \\`Belongs To\\` relationship to the \\`Shopify ${Globals.platformModules\n          .lodash()\n          .capitalize(tenantType)}\\` model.`\n      );\n    } else {\n      relatedTenantField = selectedField;\n    }\n  }\n\n  setBelongsToLink(input, record, params, model, relatedTenantField, tenantId);\n};\n\nconst setBelongsToLink = (\n  input: any,\n  record: any,\n  params: AnyParams,\n  model: ModelDescriptor,\n  relatedField: FieldMetadata,\n  tenantId: string\n) => {\n  // if we're trying to set the params to a shop other than the tenant we should reject\n  if (Globals.platformModules.lodash().isObjectLike(input)) {\n    const objectInput = input as Record<string, any>;\n    if (objectInput[relatedField.apiIdentifier]) {\n      if (String(objectInput[relatedField.apiIdentifier][LINK_PARAM]) !== tenantId) {\n        throw new PermissionDeniedError();\n      }\n    } else {\n      objectInput[relatedField.apiIdentifier] = {\n        [LINK_PARAM]: tenantId,\n      };\n    }\n  } else {\n    params[model.apiIdentifier] = {\n      [relatedField.apiIdentifier]: {\n        [LINK_PARAM]: tenantId,\n      },\n    };\n  }\n\n  if (record) {\n    const value = record.getField(relatedField.apiIdentifier);\n    // if the record doesn't have a shop set then anyone can update it\n    if (value) {\n      const recordShopId = typeof value === \"object\" ? value[LINK_PARAM] : value;\n      if (String(recordShopId) !== tenantId) {\n        throw new PermissionDeniedError();\n      }\n    } else {\n      // we have to re-apply the params to the record to ensure that this still works correctly if it occurs after \"applyParams\"\n      record.setField(relatedField.apiIdentifier, {\n        [LINK_PARAM]: tenantId,\n      });\n    }\n  }\n};\n\n/**\n * Syncs Shopify models across all models\n *\n * @param params - list of Shopify app credentials to sync data from\n * @param syncSince - starting point for data sync (default: all time)\n * @param models - list of model names to sync data from\n * @param force - enforces syncswithout checking if they're up to date\n * @param startReason - a string reason stored on the created 'shopifySync' records\n */\nexport async function globalShopifySync(params: {\n  apiKeys: string[];\n  syncSince: string;\n  models: string[];\n  force: boolean;\n  startReason: string;\n}): Promise<void> {\n  const context = maybeGetActionContextFromLocalStorage();\n  const effectAPIs = assert(\n    context ? context.effectAPIs : getCurrentContext().effectAPIs,\n    \"effect apis is missing from the current context\"\n  );\n  const api = assert(context ? context.api : getCurrentContext().api, \"api client is missing from the current context\");\n\n  const { apiKeys, syncSince, models, force, startReason } = params;\n\n  const {\n    shopModelIdentifier,\n    installedViaKeyFieldIdentifier,\n    shopifySyncModelApiIdentifier,\n    runShopifySyncAction,\n    accessTokenIdentifier,\n    forceFieldIdentifier,\n  } = await effectAPIs.getSyncIdentifiers();\n  const manager = internalModelManagerForModel(api, shopModelIdentifier, []);\n\n  const pageSize = 250;\n  let pageInfo: { first?: number; endCursor?: string; hasNextPage: boolean } = { first: pageSize, hasNextPage: true };\n  const results: { id: string; domain: string; state: Record<string, any>; [key: string]: any }[] = [];\n\n  if (apiKeys && apiKeys.length > 0) {\n    try {\n      while (pageInfo.hasNextPage) {\n        const records = await manager.findMany({\n          filter: {\n            [installedViaKeyFieldIdentifier]: {\n              in: apiKeys,\n            },\n            state: {\n              inState: \"created.installed\",\n            },\n            planName: {\n              notIn: [\"frozen\", \"fraudulent\", \"cancelled\"],\n            },\n          },\n          first: pageInfo.first,\n          after: pageInfo.endCursor,\n        });\n        results.push(...(records as any[]));\n        pageInfo = records.pagination.pageInfo;\n      }\n    } catch (error) {\n      Globals.logger.info({ userVisible: true, error, apiKeys }, \"could not get shops for all API keys\");\n      throw error;\n    }\n\n    for (const result of results) {\n      // skip the sync if there is no accessToken set or if the state is uninstalled\n      if (Globals.platformModules.lodash().isEmpty(result[accessTokenIdentifier]) || result.state?.created == \"uninstalled\") {\n        Globals.logger.info({ shopId: result.id }, \"skipping sync for shop without access token or is uninstalled\");\n        continue;\n      }\n\n      try {\n        const shopifySyncModelManager = Globals.platformModules.lodash().get(api, runShopifySyncAction.dotNotationPath);\n        await shopifySyncModelManager[runShopifySyncAction.apiIdentifier]({\n          [shopifySyncModelApiIdentifier]: {\n            shop: {\n              _link: result.id,\n            },\n            domain: result.domain,\n            syncSince,\n            models,\n            ...(forceFieldIdentifier ? { force } : undefined),\n          },\n          startReason,\n        });\n      } catch (error) {\n        // log that the sync could not be started for the shop but continue\n        Globals.logger.warn({ userVisible: true, error, shop: result }, \"couldn't start sync for shop\");\n      }\n    }\n  } else {\n    throw new InvalidActionInputError(\"missing at least 1 api key\");\n  }\n}\n\nconst enum TenantType {\n  Shop = \"shop\",\n  Customer = \"customer\",\n}\n\nconst shopifyModelKey = (modelName: string): string => {\n  const modelKey = modelName.replaceAll(\" \", \"\");\n  return `DataModel-Shopify-${modelKey}`;\n};\n\n/**\n * Updates the state of a `bulkOperation` record from Shopify when the operation completes.\n *\n * @param record - the `bulkOperation` record updated\n */\nexport async function finishBulkOperation(record: GadgetRecord<any>): Promise<void> {\n  if (!record?.id) {\n    Globals.logger.warn(`Expected bulk operation record to be present for action`);\n    return;\n  }\n\n  const context = getActionContextFromLocalStorage();\n  const shopifyAPI = await (context.connections as Record<string, any>).shopify.forShopId(record.shopId);\n  if (!shopifyAPI) {\n    Globals.logger.error(`Could not instantiate Shopify client for shop ID ${record.shopId}`);\n    return;\n  }\n  const bulkOperation = (\n    await shopifyAPI.graphql(`query {\n        node(id: \"${ShopifyBulkOperationGIDForId(record.id)}\") {\n          ... on BulkOperation {\n            id\n            status\n            errorCode\n            createdAt\n            completedAt\n            objectCount\n            fileSize\n            url\n            type\n            partialDataUrl\n            rootObjectCount\n          }\n        }\n      }`)\n  ).node;\n  // normalize the mixed upper/lowercase (GraphQL/REST) to lowercase\n  const { status, errorCode, type } = bulkOperation;\n  Object.assign(record, {\n    ...bulkOperation,\n    status: status?.toLowerCase(),\n    errorCode: errorCode?.toLowerCase(),\n    type: type?.toLowerCase(),\n    id: record.id,\n  });\n}\n\nconst ShopifyShopKey: string = shopifyModelKey(\"Shop\");\nconst ShopifyCustomerKey: string = shopifyModelKey(\"Customer\");\n\nconst ShopifyBulkOperationGIDForId = (id: string) => `gid://shopify/BulkOperation/${id}`;\n"],"names":["ShopifyBulkOperationState","ShopifySellingPlanGroupProductState","ShopifySellingPlanGroupProductVariantState","ShopifyShopState","ShopifySyncState","abortSync","finishBulkOperation","globalShopifySync","preventCrossShopDataAccess","shopifySync","Installed","created","Uninstalled","Created","Running","Completed","Errored","Canceled","Failed","Expired","Started","Deleted","params","record","context","getActionContextFromLocalStorage","effectAPIs","syncRecord","assert","shopId","models","Array","isArray","every","m","sync","id","toString","syncSince","force","startReason","error","Globals","logger","connectionSyncId","InvalidActionInputError","syncId","errorMessage","info","userVisible","options","enforceCustomerTenancy","type","Error","model","appTenancy","AppTenancyKey","shopBelongsToField","customerBelongsToField","shopify","undefined","String","customerId","input","apiIdentifier","validateBelongsToLink","ShopifyShopKey","ShopifyCustomerKey","tenantId","relatedModelKey","tenantBelongsToField","tenantType","key","PermissionDeniedError","fieldsIsBelongsToRelatedModel","Object","values","fields","filter","f","fieldType","FieldType","BelongsTo","configuration","length","MisconfiguredActionError","relatedTenantField","selectedField","find","platformModules","lodash","capitalize","setBelongsToLink","relatedField","isObjectLike","objectInput","LINK_PARAM","value","getField","recordShopId","setField","maybeGetActionContextFromLocalStorage","getCurrentContext","api","apiKeys","shopModelIdentifier","installedViaKeyFieldIdentifier","shopifySyncModelApiIdentifier","runShopifySyncAction","accessTokenIdentifier","forceFieldIdentifier","getSyncIdentifiers","manager","internalModelManagerForModel","pageSize","pageInfo","first","hasNextPage","results","records","findMany","in","state","inState","planName","notIn","after","endCursor","push","pagination","result","isEmpty","shopifySyncModelManager","get","dotNotationPath","shop","_link","domain","warn","shopifyModelKey","modelName","modelKey","replaceAll","shopifyAPI","connections","forShopId","bulkOperation","graphql","ShopifyBulkOperationGIDForId","node","status","errorCode","assign","toLowerCase"],"mappings":"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"}