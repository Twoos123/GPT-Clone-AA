{"version":3,"sources":["/app/packages/framework/src/globals.ts"],"sourceRoot":"/app","sourcesContent":["import type { RequestContext } from \"@fastify/request-context\";\nimport { AnyClient } from \"@gadgetinc/api-client-core\";\nimport { AsyncLocalStorage } from \"async_hooks\";\nimport type { Logger } from \"./AmbientContext\";\nimport type { AnyActionContext, AnyAmbientContext, AnyEffectContext, AnyGlobalActionContext } from \"./types\";\n\nexport const actionContextLocalStorage: AsyncLocalStorage<AnyActionContext | AnyGlobalActionContext | AnyEffectContext> =\n  new AsyncLocalStorage<AnyActionContext | AnyGlobalActionContext | AnyEffectContext>();\n\n/**\n * Extend the @fastify/request-context types with Gadget's added reference to the current unit of work's context\n * See https://github.com/fastify/fastify-request-context#typescript\n * */\ndeclare module \"@fastify/request-context\" {\n  interface RequestContextData {\n    requestContext: AnyAmbientContext | AnyActionContext | AnyGlobalActionContext | AnyEffectContext;\n  }\n}\n\nconst platformModuleRequirer = <T = any>(name: string): (() => any) => {\n  let mod: T = null as any;\n  return () => {\n    if (!mod) {\n      if (!Globals.platformRequire) throw new Error(\"Globals.platformRequire is not set, has it been injected by the sandbox yet?\");\n      mod = Globals.platformRequire(name);\n    }\n    return mod;\n  };\n};\n\nexport interface SettableGlobals {\n  logger: Logger;\n  modelValidator: (modelKey: string) => Promise<any>;\n  requestContext: RequestContext;\n  platformRequire: typeof require;\n  api: AnyClient;\n}\n\nexport type GlobalSetter = (globals: SettableGlobals) => void;\n\nexport const Globals: {\n  api: AnyClient;\n  modelValidator: (modelKey: string) => Promise<any>;\n  requestContext: RequestContext;\n  logger: Logger;\n  platformRequire: typeof require;\n  set: GlobalSetter;\n  platformModules: {\n    lodash: () => any;\n    bcrypt: () => any;\n    compareVersions: () => any;\n  };\n} = {\n  /**\n   * A globally accessible API client instance, set in `set` by the `AppBridge`.\n   * @internal\n   */\n  api: null as any,\n  /**\n   * Internal variable to store the model validator function, set in `set` by the `AppBridge`.\n   * @internal\n   */\n  modelValidator: null as any,\n\n  /**\n   * Internal variable to store the request context module, set in `set` by the `AppBridge`.\n   * @internal\n   */\n  requestContext: null as any,\n\n  /**\n   * @internal\n   */\n  logger: null as any,\n\n  /**\n   * Require function for importing code from the gadget platform context instead of the app's context.\n   * @internal\n   */\n  platformRequire: null as any,\n\n  /**\n   * This is used internally to set the globals for this instance of the framework package.\n   * @internal\n   */\n  set: function (this: GlobalSetter, globals: SettableGlobals): void {\n    Object.assign(this, globals);\n  },\n\n  /**\n   * Lazy-loaded modules for use in the framework package from the gadget platform context.\n   * @internal\n   */\n  platformModules: {\n    lodash: platformModuleRequirer(\"lodash\"),\n    bcrypt: platformModuleRequirer(\"bcrypt\"),\n    compareVersions: platformModuleRequirer(\"compare-versions\"),\n  },\n};\n\n(globalThis as any).GadgetGlobals = Globals;\n"],"names":["Globals","actionContextLocalStorage","AsyncLocalStorage","platformModuleRequirer","name","mod","platformRequire","Error","api","modelValidator","requestContext","logger","set","globals","Object","assign","platformModules","lodash","bcrypt","compareVersions","globalThis","GadgetGlobals"],"mappings":";;;;;;;;;;;IAwCaA,OAAO;eAAPA;;IAlCAC,yBAAyB;eAAzBA;;;;yBAJqB;;;;;;AAI3B,MAAMA,4BACX,IAAIC,CAAAA,cAAgB,mBAAC;AAYvB,MAAMC,yBAAyB,CAAUC;IACvC,IAAIC,MAAS;IACb,OAAO;QACL,IAAI,CAACA,KAAK;YACR,IAAI,CAACL,QAAQM,eAAe,EAAE,MAAM,IAAIC,MAAM;YAC9CF,MAAML,QAAQM,eAAe,CAACF;QAChC;QACA,OAAOC;IACT;AACF;AAYO,MAAML,UAYT;IACF;;;GAGC,GACDQ,KAAK;IACL;;;GAGC,GACDC,gBAAgB;IAEhB;;;GAGC,GACDC,gBAAgB;IAEhB;;GAEC,GACDC,QAAQ;IAER;;;GAGC,GACDL,iBAAiB;IAEjB;;;GAGC,GACDM,KAAK,SAA8BC,OAAwB;QACzDC,OAAOC,MAAM,CAAC,IAAI,EAAEF;IACtB;IAEA;;;GAGC,GACDG,iBAAiB;QACfC,QAAQd,uBAAuB;QAC/Be,QAAQf,uBAAuB;QAC/BgB,iBAAiBhB,uBAAuB;IAC1C;AACF;AAECiB,WAAmBC,aAAa,GAAGrB"}